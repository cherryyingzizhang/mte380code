int CurrentSpeed; //the current speed when we increased/decreased speed via keyboard input
int Step = 10; //used when we increased/decreased speed via keyboard input

void RunAllBySerialInput() {
  for (int i = 0; i < NUMMOTORS; i++)
  {
    Motors[i].Motor.writeMicroseconds(ESCSettings.Medium);
  }
  Serial.println("Running ESC");
  Serial.println("Step = ");
  Serial.println(Step);
  Serial.println("\nPress 'u' to increase speed, 'd' to reduce speed, 's' to stop all motors.");

  CurrentSpeed = ESCSettings.Medium;
  while (1) {
    while (!Serial.available())
    {
    }
    char currentChar = Serial.read();
    if (currentChar == 'u')
    {
      Serial.println("\nIncreasing motor speed by step");
      if (CurrentSpeed + Step < ESCSettings.High) {
        CurrentSpeed = CurrentSpeed + Step;
        Serial.println("New speed = ");
        Serial.println(CurrentSpeed);
      }

      else
      {
        Serial.println("\nMax speed reached\n");
      }
    }
    if (currentChar == 'd')
    {
      Serial.println("\nDecreasing motor speed by step\n");
      if (CurrentSpeed - Step >= ESCSettings.Low)
      {
        CurrentSpeed = CurrentSpeed - Step;
        Serial.println("New speed = ");
        Serial.println(CurrentSpeed);
      }

      else
      {
        Serial.println("\nMin speed reached\n");
      }
    }
    if (currentChar == 's')
    {
      Serial.println("\nStopping Motors\n");
      CurrentSpeed = ESCSettings.Medium;
    }
    for (int i = 0; i < NUMMOTORS; i++)
    {
      Motors[i].Motor.writeMicroseconds(CurrentSpeed);
    }
  }
}
//
//void RunDirectionsBySerialInput() {
//  for (int i = 0; i < NUMMOTORS; i++)
//  {
//    Motors[i].Motor.writeMicroseconds(ESCSettings.Medium);
//  }
//  Serial.println("Running ESC");
//  Serial.println("Step = ");
//  Serial.println(Step);
//  Serial.println("\nPress w, a, s, or d for lateral direction. Press q to go up, e to go down. Press x to stop.");
//
//  CurrentSpeed = ESCSettings.Medium;
//  while (1) {
//
//    //Read key when available else just loop/keep motor running in current direction.
//    while (!Serial.available())
//    {
//    }
//    char currentChar = Serial.read();
//    
//    if (currentChar == 'w')
//    {
//      Serial.println("\nGoing forward");
//      Forward();
//    }
//    if (currentChar == 'a')
//    {
//      Serial.println("\nGoing left");
//      Left();
//    }
//    if (currentChar == 's')
//    {
//      Serial.println("\nGoing backward");
//      Backward();
//    }
//    if (currentChar == 'd')
//    {
//      Serial.println("\nGoing right");
//      Right();
//    }
//    if (currentChar == 'q')
//    {
//      Serial.println("\nGoing up");
//      Up();
//    }
//    if (currentChar == 'e')
//    {
//      Serial.println("\nGoing down");
//      Down();
//    }
//    if (currentChar == 'x')
//    {
//      Serial.println("\nStopping Motors\n");
//      Stop();
//    }
//  }
//}

void SetThrottleRange()
{
  Serial.println("In Set Throttle Range mode");
    
  for (int i = 0; i < NUMMOTORS; i++)
  {
    Motors[i].Motor.writeMicroseconds(ESCSettings.High);
  }

  Serial.println("Connect the ESC now. After connecting the ESC, you should hear the ESC startup tones. Shortly afterwards, you should hear two beeps indicating that the ESC has registered the high throttle value. Immediately after hearing the two beeps, push any key. If you don't do so in 5 sec, the ESC will go into program mode");

  // Wait for user input
  while (!Serial.available())
  {
  }
  Serial.read();

  Serial.println("\nSetting the low throttle setting. If this happens successfully, you should hear several beeps indicating the input voltage supplied to the ESC followed by a long beep indicating that the low throttle has been set. After this point, push any key to proceed, your ESC is ready to be used");

  for (int i = 0; i < NUMMOTORS; i++)
  {
    Motors[i].Motor.writeMicroseconds(ESCSettings.Low);
  }

  // Wait for user input
  while (!Serial.available())
  {
  }
  Serial.read();

  for (int i = 0; i < NUMMOTORS; i++)
  {
    Motors[i].Motor.writeMicroseconds(ESCSettings.Medium);
  }

  // Wait for user input
  while (!Serial.available())
  {
  }
  Serial.read();
}